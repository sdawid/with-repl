#!/bin/sh
#|
exec racket -t $0 "$@"
|#
#lang racket/base

(require (only-in racket/list
                  drop-right)
         (only-in racket/match
                  match-let)
         (only-in racket/string
                  string-join
                  string-trim
                  string-split)
         (only-in racket/system
                  system)
         (prefix-in readline: readline/readline))

(module+ test
  (require rackunit))


; max length of the REPL prompt
(define MAX-PROMPT (make-parameter 42))


; ==========
; REPL state
;
; State := (Pairof CommandList CachedLine)
;
; where
;   CommandList := Listof String - the base command with arguments
;   CachedLine  := Option String - cached line used when entering multi line command
(define (state command-list cached-line)
  (cons command-list cached-line))

(define (append-command-list st line)
  (cons (append (car st) (string-split line " " #:repeat? #t)) (cdr st)))

(define (popn-command-list st n)
  (cons (drop-right (car st) (min (length (car st)) n)) (cdr st)))

(define (empty-command-list? st)
  (null? (car st)))

(define (cache-line st line)
  (cons (car st) line))

(define (clear-cached-line st)
  (cons (car st) ""))

(define (prepend-cached-line st line)
  (string-append (cdr st) line))


; ============
; Full Command
(define (format-full-command st line)
  (string-append (string-join (car st)) " " line))


; ======
; Prompt
(define (format-prompt st)
  (if (equal? "" (cdr st))
      (let ([prompt (string-append (string-join (car st)) "> ")])
        (if (> (string-length prompt) (MAX-PROMPT))
            (string-append ".." (substring prompt (- (string-length prompt) (- (MAX-PROMPT) 2))))
            prompt))
      "... "))

(module+ test
  (check-equal? (format-prompt (state '("a" "b") "")) "a b> ")
  (check-equal? (format-prompt (state '("a" "b") "foobar")) "... ")
  (parameterize ([MAX-PROMPT 7])
    (check-equal? (format-prompt (state '("12345") "")) "12345> ")
    (check-equal? (format-prompt (state '("123456") "")) "..456> ")))


; ================
; String functions
(define (strip-first-char s)
  (let ([l (string-length s)])
    (substring s (min 1 l) l)))

(define (strip-last-char s)
  (let ([l (string-length s)])
    (substring s 0 (max 0 (sub1 l)))))


; =============
; REPL function
(define (start-repl args)
  (when (not (null? args))
    (let ([st (state args "")])
      (with-handlers ([exn:break? (Î» (x) (printf "~n"))])
        (repl-loop st)))))

(define (repl-loop st)
  (let ([input-line (readline:readline (format-prompt st))])
    (when (not (eof-object? input-line))
      (readline:add-history input-line)
      (match-let ([(cons new-st action) (handle-input-line st input-line)])
        (when (string? action) (execute-command action) (repl-loop new-st))
        (when (equal? 'continue action) (repl-loop new-st))))))

(define (execute-command command)
  (with-handlers ([exn:break? (Î» (x) #f)])
    (system command)))

; REPL loop logic - applies imput to the REPL state
(define (handle-input-line st line)
  (let ([line (prepend-cached-line st line)]
        [st (clear-cached-line st)])
    (cond
      [(regexp-match? #rx"\\\\$" line)
       (cons (cache-line st (strip-last-char line)) 'continue)]
      [(regexp-match? #rx"^\\+" line)
       (cons (append-command-list st (strip-first-char line)) 'continue)]
      [(regexp-match? #rx"^-+$" line)
       (let ([st (popn-command-list st (string-length line))])
         (cons st (if (empty-command-list? st) 'exit 'continue)))]
      [(regexp-match? #rx"^\\!" line)
       (cons st (strip-first-char line))]
      [(equal? "" line)
       (cons st 'continue)]
      [else
       (cons st (format-full-command st line))])))

(module+ test
  (define (test-case given-state given-input expected-state expected-action)
    (match-let ([(cons actual-state actual-action) (handle-input-line given-state given-input)])
      (let ([message (format
                      "input: (~a '~a'), actual-output: (~a '~a'), expected-output: (~a '~a')"
                      given-state given-input
                      actual-state actual-action
                      expected-state expected-action)])
        (check-equal? actual-state expected-state message)
        (check-equal? actual-action expected-action message))))
  
  ; empty input - doesn't change base, executes current command if not empty
  (test-case (state '("a" "b") "")      ""
             (state '("a" "b") "")      'continue)
  (test-case (state '("a" "b") "c d")   ""
             (state '("a" "b") "")      "a b c d")
  (test-case (state '("a" "b") "c d")   "e"
             (state '("a" "b") "")      "a b c de")
  ; some input - a command is issued
  (test-case (state '("a" "b") "")      " c d "
             (state '("a" "b") "")      "a b  c d ")
  ; line starting with '+' - push-base-tokens
  (test-case (state '("a") "")          "+ b  c  "
             (state '("a" "b" "c") "")  'continue)
  (test-case (state '("a") "+b")        "c"
             (state '("a" "bc") "")     'continue)
  (test-case (state '("a") "+b")        " c"
             (state '("a" "b" "c") "")  'continue)
  ; line containing only '-' - remove base tokens
  (test-case (state '("a" "b") "")      "-"
             (state '("a") "")          'continue)
  (test-case (state '("a" "b") "")      "--"
             (state '() "")             'exit)
  (test-case (state '("a" "b") "")      "---"
             (state '() "")             'exit)
  ; multiline command - appends state line
  (test-case (state '("a") "")          "b\\"
             (state '("a") "b")         'continue)
  (test-case (state '("a") "")          "  b  \\"
             (state '("a") "  b  ")     'continue)
  (test-case (state '("a") "b")         "c\\"
             (state '("a") "bc")        'continue)
  (test-case (state '("a") "b")         "c \\"
             (state '("a") "bc ")       'continue)
  (test-case (state '("a") "a")         "\\"
             (state '("a") "a")         'continue)
  ; execute new shell subcommand
  (test-case (state '("a") "")          "!b"
             (state '("a") "")          "b")
  (test-case (state '("a") "!b")         "c"
             (state '("a") "")          "bc"))


; start repl
(start-repl (vector->list (current-command-line-arguments)))
